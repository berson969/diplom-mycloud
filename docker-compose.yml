version: "3"

services:
    postgres:
        container_name: ${DB_HOST}
        image: postgres:16-alpine
        expose:
            - ${DB_PORT}
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS}
            POSTGRES_DB: ${DB_BASE}
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_BASE}" ]
            interval: 10s
            timeout: 15s
            retries: 5
        volumes:
            - postgres_data:/var/lib/postgresql/data/

    backend:
        container_name: backend
        build:
            context: ./backend
            args:
                DB_HOST: ${DB_HOST}
                DB_PORT: ${DB_PORT}
                DB_BASE: ${DB_BASE}
                DB_USER: ${DB_USER}
                DB_PASS: ${DB_PASS}
                APP_DEBUG: ${APP_DEBUG}
                SECRET_KEY: ${SECRET_KEY}
                ALLOWED_HOSTS: ${ALLOWED_HOSTS}
                FRONTEND_URL: ${FRONTEND_URL}
                SERVER_NAME: ${SERVER_NAME}
                ADMIN_PASSWORD: ${ADMIN_PASSWORD}
        restart: always
        volumes:
            - static_volume:/app/staticfiles
            - storage_volume:/app/storage
        expose:
            - 8000
        depends_on:
            - postgres

    nginx-proxy:
        container_name: proxy
        image: nginx:mainline
        restart: always
        environment:
            SERVER_NAME: ${SERVER_NAME}
        ports:
            - '80:80'
            - '443:443'
        command: sh -c "chmod +x /home/run.sh && /home/run.sh"
        volumes:
            - static_volume:/staticfiles
            - storage_volume:/storage
            - ./nginx:/home
        depends_on:
            - backend

volumes:
    postgres_data:
    static_volume:
    storage_volume:
