name: Deploy to One Server

on:
    push:
        branches:
            - one-server

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: one-env

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

            - name: Add server to known hosts
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

            - name: Deploy to server
              env:
                  SERVER_IP: ${{ secrets.SERVER_IP }}
                  SERVER_USER: ${{ secrets.SERVER_USER }}
                  DB_NAME: ${{ secrets.DB_NAME }}
                  DB_USER: ${{ secrets.DB_USER }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  DB_HOST: ${{ secrets.DB_HOST }}
                  DB_PORT: ${{ secrets.DB_PORT }}
              run: |
                    # Копирование файлов на сервер
                    scp -r backend frontend nginx $SERVER_USER@$SERVER_IP:/home/$SERVER_USER/
                    
                    ssh -t $SERVER_USER@$SERVER_IP << EOF
                    set -e
                  
                    # Обновление системы и установка необходимых пакетов
                    sudo apt-get update && sudo apt-get upgrade -y
                    sudo apt-get install -y postgresql postgresql-contrib python3-venv python3-pip nginx
                  
                    # Настройка PostgreSQL
                    sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;" || true
                    sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';" || true
                    sudo -u postgres psql -c "ALTER ROLE $DB_USER SET client_encoding TO 'utf8';"
                    sudo -u postgres psql -c "ALTER ROLE $DB_USER SET default_transaction_isolation TO 'read committed';"
                    sudo -u postgres psql -c "ALTER ROLE $DB_USER SET timezone TO 'UTC';"
                    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
                  
                    # Настройка виртуального окружения и установка зависимостей
                    cd backend
                    python3 -m venv venv
                    source venv/bin/activate
                    pip install -r requirements.txt
                  
                    # Создание .env файла
                    cat > /home/$SERVER_USER/backend/.env << EOL
                    DB_NAME='$DB_NAME'
                    DB_HOST='$DB_HOST'
                    DB_PORT='$DB_PORT'
                    DB_USER='$DB_USER'
                    DB_PASSWORD='$DB_PASSWORD'
                    EOL
                    chmod 600 /home/$SERVER_USER/backend/.env
                  
                    # Миграции, сбор статических файлов, создание суперпользователя
                    python3 manage.py migrate || { echo "Migration failed"; exit 1; }
                    python3 manage.py collectstatic --noinput
                    python3 manage.py create_superuser
                  
                    # Создание директории для логов
                    mkdir -p /home/$SERVER_USER/backend/logs
                  
                    # Копирование и настройка Gunicorn service файла
                    sudo cp /home/$SERVER_USER/backend/gunicorn_one.service /etc/systemd/system/gunicorn.service
                    sudo sed -i "s/SERVER_USER/$SERVER_USER/g" /etc/systemd/system/gunicorn.service
                  
                    # Запуск Gunicorn
                    sudo systemctl daemon-reload
                    sudo systemctl restart gunicorn 
                    && sudo systemctl is-active --quiet gunicorn || { echo "Gunicorn failed to start"; exit 1; }
                    sudo systemctl enable gunicorn
                  
                    # Настройка и перезапуск Nginx
                    sudo cp /home/$SERVER_USER/nginx/nginx.conf /etc/nginx/sites-available/mycloud
                    sudo ln -sf /etc/nginx/sites-available/mycloud /etc/nginx/sites-enabled/
                    sudo nginx -t && sudo systemctl restart nginx
                    EOF

            - name: Verify deployment
              run: |
                  curl -I --connect-timeout 10 https://${{ secrets.SERVER_IP }}
